<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.lisijietech</groupId>
		<artifactId>spring-cloud</artifactId>
		<version>0.0.1-SNAPSHOT</version>
		<!-- 
			<relativePath/> lookup parent from repository,
			直接从本地仓库的父级目录获取../pom.xml(注意是本地仓库路径)，不从本地路径获取，
			但是本聚合模块的groupId继承父项目的groupId，本地仓库中目录是同一层，父层级找不到，会报错。
			所以不能设置<relativePath/>，要么设置好本地路径../pom.xml，
			<relativePath>../pom.xml</relativePath>
			要么不设置此标签，默认会根据坐标去仓库找，
			或者本模块groupId在添加一个子路径，如com.lisijietech.eureka，但是没必要。
		 -->
		<!-- <relativePath /> --> <!-- lookup parent from repository -->
	</parent>
	<!-- <groupId>com.lisijietech</groupId> -->
	<artifactId>service-cluster-netflix</artifactId>
	<!-- <version>0.0.1-SNAPSHOT</version> -->
	<properties>
		<java.version>1.8</java.version>
	</properties>
	
	<dependencies>
		<!-- 
			不加此依赖无法注册到eureka，还会停止服务，
			日志信息：
			Unregistering application SERVICE-0 with eureka with status DOWN 
			Saw local status change event StatusChangeEvent
		-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<!-- 
				除了测试源中用到外，还在java代码源中有用到相关功能。
				如openfeign的controller中用MockMultipartFile来进行feign接口调用。
				所以scope不能是test，不然在java代码源中无法导入包。
				工程中，测试代码和生产代码最好区分开。
				个人对spring的测试功能用的很少，以后研究。
			 -->
			<!-- <scope>test</scope> -->
		</dependency>
	
		<!-- eureka服务端包含了客户端，尽量最小化导入包，服务只导入客户端 -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
		
		<!-- 
			Ribbon负载均很。SpringCloud在2020版本移除了很多Netflix的组件，但可以自己导入包使用。
			学习思路原理，新的技术也能很好理解掌握，主要新技术英文资料读不懂=_=。
		 -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
		</dependency>
		
		<!-- SpringRetry重试框架依赖，SpirngCloud、Ribbon中重试需要依赖 -->
		<dependency>
			<groupId>org.springframework.retry</groupId>
			<artifactId>spring-retry</artifactId>
		</dependency>
		
		<!-- 远程调用依赖。目前有封装了openfeign的功能。 -->
		<dependency>
			<groupId>com.lisijietech</groupId>
			<artifactId>rpc-api</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>
		
		<!-- 
			Hystrix豪猪断路器框架。在Hoxton.SR8版本的SpringCloud框架中OpenFeign只集成了Hystrix的核心功能，
			如果要用某些功能，如使用@HystrixCommand注解方式，或者与监控仪表盘等集成，需要显示导入
		 -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
		</dependency>
		
		<!-- 高级消息列队协议依赖包，rabbitmq是通过amqp通信 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-amqp</artifactId>
		</dependency>
	</dependencies>
	<!-- <dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement> -->

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
